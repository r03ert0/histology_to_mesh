import json
import numpy as np
import os
import sys

def find_max_slice_index(data):
    '''Find the maximum slice index in the contour data'''
    max_slice_index = 0
    for row in data:
        for path in row:
            slice_index = path[0][2] # slice index is the 3rd coordinate
            if slice_index > max_slice_index:
                max_slice_index = slice_index
    return max_slice_index

def json2array(data):
    '''Convert the contour coordinates from the json data into
    an array with the format expected by histology_to_mesh. The
    index in the new registered_contours array is the slice
    index.'''

    max_slice_index = find_max_slice_index(data)
    print(f"{max_slice_index} slices")

    registered_contours = [None] * (max_slice_index + 1)

    for row in data:
        new_row = []
        slice_index = row[0][0][2] # 1st path, 1st vert, 3rd coordinate
        for path in row:
            new_path = np.array(path)
            new_row.append(new_path[:, :2]) # store only x and y coordinates
        registered_contours[slice_index] = new_row
    return np.array(registered_contours, dtype=object)

def convert_json_contours(input_file, output_file):
    '''Convert json contours to the format expected by histology_to_mesh
    and save the result'''

    file = open(input_file)
    data = json.load(file)
    registered_contours = json2array(data)

    path = os.path.join(output_file)
    np.savez_compressed(
        path,
        allow_pickle=True,
        registered_contours=registered_contours
    )

def main(argv):
    '''Main function called from the command line'''
    if len(argv) != 3:
        print('''
convert_json_contours.py

Usage:
  python convert_json_contours.py input_file output_file

Where:
  input_file: path to brain.json file generated by the register_contours UI.
  output_file: path to registered_contours.npz which can be used by the
    surface reconstruction pipeline. The surface reconstruction
    pipeline expects that file to be called "7_registered_contours.npz"
        ''')
        return

    _,input_file, output_file = argv

    convert_json_contours(input_file, output_file)

if __name__ == "__main__":
    main(sys.argv)
